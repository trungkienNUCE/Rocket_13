DROP DATABASE IF EXISTS TestingSystem;
CREATE DATABASE TestingSystem;
USE TestingSystem;

/*===============CREATE TABLE & CONSTRAINS===============*/
/*=======================================================*/
-- DROP TABLE Department
DROP TABLE IF EXISTS Department;
-- CREATE TABLE Department
CREATE TABLE Department
(
	DepartmentID 	TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    DepartmentName 	NVARCHAR(30) NOT NULL UNIQUE KEY
);

-- DROP TABLE Position
DROP TABLE IF EXISTS Position;
-- CREATE TABLE Position
CREATE TABLE Position
(
	PositionID 		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    PositionName 	ENUM('Dev','Test','Scrum Master','PM') NOT NULL UNIQUE KEY
);

-- DROP TABLE Account
DROP TABLE IF EXISTS `Account`;
-- CREATE TABLE Account
CREATE TABLE `Account`
(
	AccountID 		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Email 			VARCHAR(50) NOT NULL UNIQUE KEY,
    Username 		VARCHAR(50) NOT NULL UNIQUE KEY,
    Fullname 		NVARCHAR(50) NOT NULL,
    DepartmentID 	TINYINT UNSIGNED NOT NULL,
    PositionID 		TINYINT UNSIGNED NOT NULL,
    CreateDate 		DATETIME DEFAULT NOW(),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    FOREIGN KEY (PositionID) REFERENCES `Position`(PositionID)
);
CREATE TABLE `Account`
(
	AccountID 		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Email 			VARCHAR(50) NOT NULL UNIQUE KEY,
    Username 		VARCHAR(50) NOT NULL UNIQUE KEY,
    Fullname 		NVARCHAR(50) NOT NULL,
    DepartmentID 	TINYINT UNSIGNED NOT NULL,
    PositionID 		TINYINT UNSIGNED NOT NULL,
    CreateDate 		DATETIME DEFAULT NOW(),
    CONSTRAINT fk_account_departments FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    CONSTRAINT fk_account_Position  FOREIGN KEY (PositionID) REFERENCES `Position`(PositionID)
);



-- DROP TABLE Group
DROP TABLE IF EXISTS `Group`;
-- CREATE TABLE Group
CREATE TABLE `Group`
(
	GroupID 		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    GroupName 		NVARCHAR(50) NOT NULL UNIQUE KEY,
    CreatorID 		TINYINT UNSIGNED,
    CreateDate 		DATETIME DEFAULT NOW(),
    FOREIGN KEY (CreatorID) REFERENCES  `Account`(AccountID)
);

ALTER TABLE `Group`
ADD FOREIGN KEY(CreatorID) REFERENCES  `Account`(AccountID) ;

ALTER TABLE `Group`
DROP FOREIGN KEY group_ibfk_1;

-- DROP TABLE GroupAccount
DROP TABLE IF EXISTS GroupAccount;
-- CREATE TABLE GroupAccount
CREATE TABLE GroupAccount
(
	GroupID 		TINYINT UNSIGNED,
    AccountID 		TINYINT UNSIGNED NOT NULL,
    JoinDate 		DATETIME DEFAULT NOW(),
    PRIMARY KEY (GroupID,AccountID),
    FOREIGN KEY (GroupID) REFERENCES `Group`(GroupID)
);

-- DROP TABLE TypeQuestion
DROP TABLE IF EXISTS TypeQuestion;
-- CREATE TABLE TypeQuestion
CREATE TABLE TypeQuestion
(
	TypeID 		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    TypeName 	ENUM ('Essay','Multiple-Choice')
);

-- DROP TABLE CategoryQuestion
DROP TABLE IF EXISTS CategoryQuestion;
-- CREATE TABLE CategoryQuestion
CREATE TABLE CategoryQuestion
(
	CategoryID		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    CategoryName 	NVARCHAR(50) NOT NULL UNIQUE KEY
);

-- DROP TABLE Question
DROP TABLE IF EXISTS Question;
-- CREATE TABLE Question
CREATE TABLE Question
(
	QuestionID		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Content 		NVARCHAR(255) NOT NULL,
    CategoryID		TINYINT UNSIGNED NOT NULL,
    TypeID 			TINYINT UNSIGNED NOT NULL,
    CreatorID 		TINYINT UNSIGNED NOT NULL,
    CreateDate 		DATETIME DEFAULT NOW(),
    FOREIGN KEY (CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY (TypeID) REFERENCES TypeQuestion(TypeID),
    FOREIGN KEY (CreatorID) REFERENCES `Account`(AccountID)
);

-- DROP TABLE Answer
DROP TABLE IF EXISTS Answer;
-- CREATE TABLE Answer
CREATE TABLE Answer
(
	AnswerID		TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Content 		NVARCHAR(255) NOT NULL,
    QuestionID		TINYINT UNSIGNED NOT NULL,
    isCorrect 		BIT DEFAULT 1,
    FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID)
);

-- DROP TABLE Exam
DROP TABLE IF EXISTS Exam;
-- CREATE TABLE Exam
CREATE TABLE Exam
(
	ExamID			TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    `Code` 			CHAR(10) NOT NULL,
    Title 			NVARCHAR(50) NOT NULL,
    CategoryID		TINYINT UNSIGNED NOT NULL,
    Duration 		TINYINT UNSIGNED NOT NULL,
    CreatorID 		TINYINT UNSIGNED NOT NULL,
    CreateDate 		DATETIME DEFAULT NOW(),
    FOREIGN KEY (CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY (CreatorID) REFERENCES `Account`(AccountID)
);

-- DROP TABLE ExamQuestion
DROP TABLE IF EXISTS ExamQuestion;
-- CREATE TABLE ExamQuestion
CREATE TABLE ExamQuestion
(
	ExamID			TINYINT UNSIGNED NOT NULL,
    QuestionID		TINYINT UNSIGNED NOT NULL,
    PRIMARY KEY (ExamID,QuestionID),
    FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID),
    FOREIGN KEY (ExamID) REFERENCES Exam(ExamID)
);
